{"version":3,"file":"static/js/593.6afae106.chunk.js","mappings":"4NAKaA,EAAOC,EAAAA,GAAAA,GAAH,wFAMJC,EAAOD,EAAAA,GAAAA,GAAH,8G,IAMUA,EAAAA,EAAAA,IAAOE,EAAAA,GAAPF,CAAH,8kBAcE,SAAAG,GAAK,OACvBA,EAAMC,MAAN,+CAC4CD,EAAMC,MADlD,oBAEWC,EAFX,IADuB,I,QCb/B,EAfmB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACdC,GAAWC,EAAAA,EAAAA,MACjB,OACE,SAACT,EAAD,UACGO,EAAOG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,eAAP,OACV,SAACV,EAAD,WACE,SAAC,KAAD,CAAMW,MAAO,CAAEC,KAAMN,GAAYO,GAAE,kBAAaJ,GAAhD,SACGC,KAFMD,EADD,KASjB,C,2JCdYK,EAAcf,EAAAA,GAAAA,MAAH,iOAaXgB,EAAehB,EAAAA,GAAAA,OAAH,wN,SCgBzB,EA7Ba,SAAC,GAAyB,IAAvBiB,EAAsB,EAAtBA,gBACd,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAYA,OACE,kBAAMC,SAXa,SAAAC,GACnBA,EAAEC,iBAEFN,EAAgB,CAAEE,MAAAA,GACnB,EAOC,WACE,SAACJ,EAAD,CACES,KAAK,OACLnB,YAAY,aACZoB,WAAS,EACTC,MAAOP,EACPQ,SAXqB,SAAC,GAA2B,IAAfD,EAAc,EAAxBE,OAAUF,MACtCN,EAASM,EACV,KAWG,SAACV,EAAD,CAAcQ,KAAK,SAASK,UAAWV,EAAvC,SAA8C,aAKnD,E,SCID,EA3Be,WACb,OAA4BD,EAAAA,EAAAA,UAAS,IAArC,eAAOZ,EAAP,KAAewB,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBf,EAArB,KAiBA,OAfAgB,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAeF,EAAaG,IAAI,SACtC,GAAKD,EAAL,CAEA,IAAME,EAAiB,mCAAG,8GAEKC,EAAAA,EAAAA,IAAaH,GAFlB,OAEhBI,EAFgB,OAGtBR,EAAUQ,GAHY,gDAKtBC,QAAQC,IAAR,MALsB,yDAAH,qDAQvBJ,GAVyB,CAW1B,GAAE,CAACJ,KAGF,iCACE,SAACS,EAAD,CAAYxB,gBAAiBA,IAC5BX,EAAOoC,OAAS,IAAK,SAACC,EAAA,EAAD,CAAYrC,OAAQA,MAG/C,C,+LC3BDsC,EAAAA,EAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EAAS,CACbA,OAAQ,CACNC,QANY,mCAOZC,SAAU,UAIDC,EAAmB,mCAAG,oGACVJ,EAAAA,EAAAA,IAAA,sBAAiCC,GADvB,cAC3BI,EAD2B,yBAE1BA,EAASC,KAAKC,SAFY,2CAAH,qDAKnBC,EAAiB,mCAAG,WAAMC,GAAN,uFACRT,EAAAA,EAAAA,IAAA,iBAAoBS,EAApB,KAAgCR,GADxB,cACzBI,EADyB,yBAExBA,EAASC,MAFe,2CAAH,sDAKjBb,EAAY,mCAAG,WAAMiB,GAAN,uFACHV,EAAAA,EAAAA,IAAA,8BAAiCU,GAAaT,GAD3C,cACpBI,EADoB,yBAEnBA,EAASC,KAAKC,SAFK,2CAAH,sDAKZI,EAAc,mCAAG,WAAMF,GAAN,uFACLT,EAAAA,EAAAA,IAAA,gBAAmBS,EAAnB,aAAuCR,GADlC,cACtBI,EADsB,yBAErBA,EAASC,KAAKM,MAFO,2CAAH,sDAKdC,EAAiB,mCAAG,WAAMJ,GAAN,uFACRT,EAAAA,EAAAA,IAAA,gBAAmBS,EAAnB,aAAuCR,GAD/B,cACzBI,EADyB,yBAExBA,EAASC,KAAKC,SAFU,2CAAH,qD","sources":["components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.jsx","components/SearchForm/SearchForm.styled.js","components/SearchForm/SearchForm.jsx","pages/Movies.jsx","services/SearchApi.jsx"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport placeholder from '../images/placeholder.png';\n\nexport const List = styled.ul`\n  list-style: none;\n  font-size: 1.1rem;\n  font-weight: 500;\n`;\n\nexport const Item = styled.li`\n  padding: 5px 12px;\n  border-bottom: 1px solid transparent;\n  position: relative;\n`;\n\nexport const LinkDetails = styled(Link)`\n  color: #000;\n  text-decoration: none;\n  margin: 1px;\n\n  &:hover,\n  &:focus {\n    color: #064e8a;\n  }\n\n  @media screen and (min-width: 768px) {\n    &:hover::after,\n    &:focus::after {\n      content: '';\n      background-image: ${props =>\n        props.cover\n          ? `url('https://image.tmdb.org/t/p/w500/${props.cover}')`\n          : `url(${placeholder})`};\n\n      background-size: cover;\n      width: 160px;\n      height: 240px;\n      display: block;\n      border-radius: 4px;\n      border: 1px solid rgba(43, 134, 197);\n      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\n      position: absolute;\n      top: -140px;\n      left: 400px;\n      z-index: 1;\n    }\n  }\n`;\n","import { useLocation, Link } from 'react-router-dom';\nimport { List, Item } from './MoviesList.styled';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <List>\n      {movies.map(({ id, original_title }) => (\n        <Item key={id}>\n          <Link state={{ from: location }} to={`/movies/${id}`}>\n            {original_title}\n          </Link>\n        </Item>\n      ))}\n    </List>\n  );\n};\n\nexport default MoviesList;\n\n// return (\n//   <>\n//     <List>\n//       {movies.map(movie => (\n//         <Item key={movie.id}>\n//           <div\n//             to={`/movies/${movie.id}`}\n//             state={{ from: location }}\n//             cover={movie.poster_path}\n//           >\n//             {movie.title}\n//           </div>\n//         </Item>\n//       ))}\n//     </List>\n//   </>\n// );\n","import styled from 'styled-components';\n\nexport const InputSearch = styled.input`\n  font-weight: 500;\n  font-size: 16px;\n  padding: 12px;\n  color: rgba(255, 255, 255, 0.2);\n  background: #064e8a;\n  border-radius: 8px;\n  :active,\n  :focus,\n  :hover {\n    color: white;\n  }\n`;\nexport const ButtonSearch = styled.button`\n  padding: 8px 16px;\n  margin: 16px;\n  border: none;\n  border-radius: 4px;\n  text-decoration: none;\n  color: white;\n  font-size: 16px;\n  background-color: #064e8a;\n  cursor: pointer;\n`;\n// export const Icon = styled(FcSearch)`\n//   width: 25px;\n//   height: 25px;\n//   position: relative;\n//   right: 56px;\n//   z-index: 1;\n//   opacity: 0.7;\n// `;\n\n// font-weight: 500;\n// font-size: 18px;\n// line-height: 27px;\n\n// margin-left: 12px;\n// padding: 15px 16px;\n\n// color: rgba(255, 255, 255, 0.2);\n\n// background: #2b2b2b;\n// border-radius: 10px;\n\n// :not(:disabled):active,\n// :focus,\n// :not(:disabled):hover {\n//   color: white;\n// }\n\n// export const Form = styled.form`\n//   display: flex;\n//   align-items: center;\n//   gap: 1.5rem;\n//   padding: 0 16px;\n//   flex-wrap: wrap;\n\n//   input {\n//     font-size: 1rem;\n//     padding: 8px 32px 8px 8px;\n//     width: 250px;\n//     background-color: transparent;\n//     border: none;\n//     border-bottom: 2px solid #064e8a;\n//     outline: none;\n//   }\n// `;\n","import { useState } from 'react';\nimport { InputSearch, ButtonSearch } from './SearchForm.styled';\nconst Form = ({ setSearchParams }) => {\n  const [query, setQuery] = useState('');\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    setSearchParams({ query });\n  };\n\n  const handleSearchParams = ({ target: { value } }) => {\n    setQuery(value);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <InputSearch\n        type=\"text\"\n        placeholder=\"Name movie\"\n        autoFocus\n        value={query}\n        onChange={handleSearchParams}\n      />\n      <ButtonSearch type=\"submit\" disabled={!query}>\n        Search\n      </ButtonSearch>\n    </form>\n  );\n};\n\nexport default Form;\n","import React, { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { handleSearch } from 'services/SearchApi';\nimport SearchForm from 'components/SearchForm/SearchForm';\nimport MoviesList from 'components/MoviesList/MoviesList';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  useEffect(() => {\n    const currentQuery = searchParams.get('query');\n    if (!currentQuery) return;\n\n    const fetchMovieByQuery = async () => {\n      try {\n        const movieByQuery = await handleSearch(currentQuery);\n        setMovies(movieByQuery);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n    fetchMovieByQuery();\n  }, [searchParams]);\n\n  return (\n    <>\n      <SearchForm setSearchParams={setSearchParams} />\n      {movies.length > 0 && <MoviesList movies={movies} />}\n    </>\n  );\n};\n\nexport default Movies;\n// const Movies = () => {\n//   const [searchResults, setSearchResults] = useState([]);\n//   const [searchParams, setSearchParams] = useSearchParams();\n//   const movieName = searchParams.get('query') || '';\n//   const [loading, setLoading] = useState(false);\n\n//   const updateQueryString = query => {\n//     const nextParams = query !== '' && { query };\n//     setSearchParams(nextParams);\n//   };\n\n//   useEffect(() => {\n//     const search = async () => {\n//       try {\n//         setLoading(true);\n//         const movies = await handleSearch(movieName);\n//         setSearchResults(movies);\n//       } catch (error) {\n//         console.error(error);\n//       } finally {\n//         setLoading(false);\n//       }\n//     };\n//     search();\n//   }, [movieName]);\n\n//   return (\n//     <div>\n//       <SkeletonTheme baseColor=\"#dddddd\" highlightColor=\"#a5a5a5\">\n//         <SearchForm value={movieName} onChange={updateQueryString} />\n//         {loading ? (\n//           <Skeleton\n//             count={15}\n//             style={{ height: 30, width: 300, marginTop: 15 }}\n//           />\n//         ) : searchResults.length === 0 && movieName ? (\n//           <h2> Nothing found</h2>\n//         ) : (\n//           <MoviesList films={searchResults} />\n//         )}\n//       </SkeletonTheme>\n//     </div>\n//   );\n// };\n\n// export default Movies;\n","import axios from 'axios';\n\nconst API_KEY = 'd3f1e252515ffd863daf881642a1c381';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst params = {\n  params: {\n    api_key: API_KEY,\n    language: 'en-US',\n  },\n};\n\nexport const fetchTrendingMovies = async () => {\n  const response = await axios.get(`trending/movie/day?`, params);\n  return response.data.results;\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const response = await axios.get(`/movie/${movieId}?`, params);\n  return response.data;\n};\n\nexport const handleSearch = async movieName => {\n  const response = await axios.get(`/search/movie?query=${movieName}`, params);\n  return response.data.results;\n};\n\nexport const fetchMovieCast = async movieId => {\n  const response = await axios.get(`movie/${movieId}/credits?`, params);\n  return response.data.cast;\n};\n\nexport const fetchMovieReviews = async movieId => {\n  const response = await axios.get(`movie/${movieId}/reviews?`, params);\n  return response.data.results;\n};\n"],"names":["List","styled","Item","Link","props","cover","placeholder","movies","location","useLocation","map","id","original_title","state","from","to","InputSearch","ButtonSearch","setSearchParams","useState","query","setQuery","onSubmit","e","preventDefault","type","autoFocus","value","onChange","target","disabled","setMovies","useSearchParams","searchParams","useEffect","currentQuery","get","fetchMovieByQuery","handleSearch","movieByQuery","console","log","SearchForm","length","MoviesList","axios","params","api_key","language","fetchTrendingMovies","response","data","results","fetchMovieDetails","movieId","movieName","fetchMovieCast","cast","fetchMovieReviews"],"sourceRoot":""}